{"version":3,"sources":["webpack://rcb-website/./src/components/wetter/owm-panel.js"],"names":["axios","require","OwmPanel","beginn","useState","wetterdaten","setWetterdaten","moment","resolver","record","eventBeginn","hourly","forEach","wd","d","Date","dt","Math","abs","diff","fuer","format","vom","daily","temp","eve","feels_like","then","r","data","t1","parseInt","t2","desc","humidity","className","weather","map","w","key","id","width","height","src","icon","alt","description","title"],"mappings":"gMAKMA,EAAQC,EAAQ,OAaP,SAASC,EAAT,GAA6B,IAAVC,EAAS,EAATA,OAC9B,GAAsCC,cAAS,MAAxCC,EAAP,KAAoBC,EAApB,KACAC,WAAc,MACd,IAbsBC,EAalBC,EAAS,KACPC,EAAcH,IAAOJ,GAEvBE,GAGAA,EAAYM,OAAOC,SAAQ,SAAAC,GACvB,IAAMC,EAAIP,IAAO,IAAIQ,KAAW,IAANF,EAAGG,KACXC,KAAKC,IAAIJ,EAAEK,KAAKT,EAAa,YACnC,KACRD,EAAM,iBACCI,EADD,CAEFO,KAAMb,IAAO,IAAIQ,KAAW,IAANF,EAAGG,KAAUK,OAAO,uBAC1CC,IAAKf,IAAO,IAAIQ,MAAQM,OAAO,wBAIvCZ,GACAJ,EAAYkB,MAAMX,SAAQ,SAAAC,GACtB,IAAMC,EAAIP,IAAO,IAAIQ,KAAW,IAANF,EAAGG,KACXC,KAAKC,IAAIJ,EAAEK,KAAKT,EAAa,UACnC,KACRD,EAAM,iBACCI,EADD,CAEFO,KAAMb,IAAO,IAAIQ,KAAW,IAANF,EAAGG,KAAUK,OAAO,iBAC1CC,IAAKf,IAAO,IAAIQ,MAAQM,OAAO,kBAC/BG,KAAMX,EAAGW,KAAKC,IACdC,WAAYb,EAAGa,WAAWD,YAxCxBjB,EAiBGF,EAXlBN,EAFE,6IAGR2B,MAAK,SAAAC,GAAO,OAAOpB,EAASoB,EAAEC,UAwC/B,IAAMC,EAAKrB,GAAUsB,SAAStB,EAAOe,MAC/BQ,EAAKvB,GAAUsB,SAAStB,EAAOiB,YAE/BA,EAAaI,IAAKE,EAAK,GAAV,YAA2BA,EAA3B,QACbC,EAAOxB,GAAM,MAAUA,EAAOW,KAAjB,MAA2BU,EAA3B,OAAoCJ,EAAajB,EAAOyB,SAAxD,mCAAmGzB,EAAOa,IAC7H,OAAO,uBAAKa,UAAU,eACjB1B,EACG,2BAAMA,EAAO2B,QAAQC,KAAI,SAAAC,GAAC,OAAI,uBAAKC,IAAKD,EAAEE,GAAIC,MAAO,IAAKC,OAAQ,IAAKC,IAAG,oCAAsCL,EAAEM,KAAxC,UAAuDC,IAAQP,EAAEQ,YAAP,MAAwBb,EAAQc,MAAUT,EAAEQ,YAAP,MAAwBb,QAClM","file":"746-c1405cf2357986c0b07d.js","sourcesContent":["import React, {useState} from \"react\"\nimport moment from \"moment\"\n\nimport \"./owm-panel.css\"\n\nconst axios = require(\"axios\")\n\n\nconst fetchWetterdaten = (resolver) => {\n    const lat    = process.env.GATSBY_LOLA_LAT\n    const lng    = process.env.GATSBY_LOLA_LNG\n    const apiKey = process.env.GATSBY_OWM_API_KEY\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${apiKey}&units=metric&lang=de`\n\n    return axios(url)\n    .then(r => { return resolver(r.data)})\n}\n\nexport default function OwmPanel({beginn}) {\n    const [wetterdaten, setWetterdaten] = useState(null)\n    moment.locale('de')\n    var record = null\n    const eventBeginn = moment(beginn)\n\n    if(!wetterdaten) {\n            fetchWetterdaten(setWetterdaten)\n    } else {\n        wetterdaten.hourly.forEach(wd => {\n            const d = moment(new Date(wd.dt*1000))\n            const diff_min =  Math.abs(d.diff(eventBeginn, 'minutes'))\n            if(diff_min<31) {\n                record = {\n                    ...wd,\n                    fuer: moment(new Date(wd.dt*1000)).format(\"dd., D.M.yyyy HH:mm\"),\n                    vom: moment(new Date()).format(\"D.M.yyyy HH:mm\"),\n                }\n            }\n        })\n        if(!record) {\n            wetterdaten.daily.forEach(wd => {\n                const d = moment(new Date(wd.dt*1000))\n                const diff_min =  Math.abs(d.diff(eventBeginn, 'hours'))\n                if(diff_min<13) {\n                    record = {\n                        ...wd,\n                        fuer: moment(new Date(wd.dt*1000)).format(\"dd., D.M.yyyy\"),\n                        vom: moment(new Date()).format(\"D.M.yyyy HH:mm\"),\n                        temp: wd.temp.eve,\n                        feels_like: wd.feels_like.eve\n                    }\n                }\n            })\n            }\n    }\n\n    const t1 = record && parseInt(record.temp)\n    const t2 = record && parseInt(record.feels_like)\n\n    const feels_like = t1===t2 ? '' : `(gefühlt ${t2} °C) `\n    const desc = record && `am ${record.fuer} - ${t1} °C ${feels_like}${record.humidity} % rel. Luftf. - Vorhersage vom ${record.vom}`\n    return <div className=\"float-right\">\n        {record ?\n            <div>{record.weather.map(w => <img key={w.id} width={100} height={100} src={`http://openweathermap.org/img/wn/${w.icon}@2x.png`} alt={`${w.description} - ${desc}`} title={`${w.description} - ${desc}`}/>)}</div>\n         : <p>leider keine Wetterdaten vorhanden</p>}\n        </div>\n}\n\n\n"],"sourceRoot":""}